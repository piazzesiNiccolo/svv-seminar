@inproceedings{o2001local,
  title={Local reasoning about programs that alter data structures},
  author={O’Hearn, Peter and Reynolds, John and Yang, Hongseok},
  booktitle={International Workshop on Computer Science Logic},
  pages={1--19},
  year={2001},
  organization={Springer}
}

@inproceedings{calcagno2015moving,
  title={Moving fast with software verification},
  author={Calcagno, Cristiano and Distefano, Dino and Dubreil, J{\'e}r{\'e}my and Gabi, Dominik and Hooimeijer, Pieter and Luca, Martino and O’Hearn, Peter and Papakonstantinou, Irene and Purbrick, Jim and Rodriguez, Dulma},
  booktitle={NASA Formal Methods Symposium},
  pages={3--11},
  year={2015},
  organization={Springer}
}

@InProceedings{localshape,
author="Distefano, Dino
and O'Hearn, Peter W.
and Yang, Hongseok",
editor="Hermanns, Holger
and Palsberg, Jens",
title="A Local Shape Analysis Based on Separation Logic",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="287--302",
abstract="We describe a program analysis for linked list programs where the abstract domain uses formulae from separation logic.",
isbn="978-3-540-33057-8"
}

@InProceedings{Smallfoot,
author="Berdine, Josh
and Calcagno, Cristiano
and O'Hearn, Peter W.",
editor="de Boer, Frank S.
and Bonsangue, Marcello M.
and Graf, Susanne
and de Roever, Willem-Paul",
title="Smallfoot: Modular Automatic Assertion Checking with Separation Logic",
booktitle="Formal Methods for Components and Objects",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="115--137",
abstract="Separation logic is a program logic for reasoning about programs that manipulate pointer data structures. We describe Smallfoot, a tool for checking certain lightweight separation logic specifications. The assertions describe the shapes of data structures rather than their detailed contents, and this allows reasoning to be fully automatic. The presentation in the paper is tutorial in style. We illustrate what the tool can do via examples which are oriented toward novel aspects of separation logic, namely: avoidance of frame axioms (which say what a procedure does not change); embracement of ``dirty'' features such as memory disposal and address arithmetic; information hiding in the presence of pointers; and modular reasoning about concurrent programs.",
isbn="978-3-540-36750-5"
}

@article{modelchecking,
  title={Model checking for symbolic-heap separation logic with inductive predicates},
  author={Brotherston, James and Gorogiannis, Nikos and Kanovich, Max and Rowe, Reuben},
  journal={ACM SIGPLAN Notices},
  volume={51},
  number={1},
  pages={84--96},
  year={2016},
  publisher={ACM New York, NY, USA}
}

@inproceedings{berdine2011slayer,
  title={SLAyer: Memory safety for systems-level code},
  author={Berdine, Josh and Cook, Byron and Ishtiaq, Samin},
  booktitle={International Conference on Computer Aided Verification},
  pages={178--183},
  year={2011},
  organization={Springer}
}

@article{brookes2016concurrent,
  title={Concurrent separation logic},
  author={Brookes, Stephen and O'Hearn, Peter W},
  journal={ACM SIGLOG News},
  volume={3},
  number={3},
  pages={47--65},
  year={2016},
  publisher={ACM New York, NY, USA}
}
